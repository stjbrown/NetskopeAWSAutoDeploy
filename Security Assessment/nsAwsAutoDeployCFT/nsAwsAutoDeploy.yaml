---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AWSAccount:
    Type: String
    Description: Enter the name of the AWS Account
  NSDomain:
    Type: String
    Description: Enter the hostname of the Netskope Tenant. (i.e. example.goskope.com) 
  NSApiToken:
    Type: String
    NoEcho: true 
    Description: Enter the API key from the Netskope Tenant.
  AdminEmail:
    Type: String
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    Description: Enter the email Address to be alerted
  ScanInterval:
    Type: String
    Default: "30"
    AllowedValues:
      - "30"
      - "60"
      - "120"
      - "360"
      - "1440"
    Description: Number of minutes between
Mappings:
  RegionMap: 
    us-east-1:
        "bucket": "netskope-autodeploy-us-east-1"
    us-west-1:
        "bucket": "netskope-autodeploy-us-west-1"
    eu-central-1:
        "bucket": "netskope-autodeploy-eu-central-1"
Resources:
  #Create Lambda Role for Custom Resources
  nsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: NetskopeLambdaPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: "arn:aws:logs:*:*:*"
  #Create Lambda for Role Prep                
  nsAwsRolePrepInfo:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      Code:
        S3Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", bucket ]
        S3Key: 'Security_Assessment/nsAwsRolePrepInfo.zip'
      Description: 'Netskope Function to Request Role Prep Info'
      MemorySize: 128
      Timeout: 90
      Role: !GetAtt nsLambdaRole.Arn
  #Create Lambda to Create Instance in Netskope
  nsCreateAwsInstance:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      Code:
        S3Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", bucket ]
        S3Key: 'Security_Assessment/nsCreateAwsInstance.zip'
      Description: 'Netskope Function to Create AWS Instance in Netskope'
      MemorySize: 128
      Timeout: 90
      Role: !GetAtt nsLambdaRole.Arn
  #Create Lambda to Grant the Instance
  nsGrantInstance:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      Code:
        S3Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", bucket ]
        S3Key: 'Security_Assessment/nsGrantInstance.zip'
      Description: 'Netskope Function to Grant an AWS Instance in Netskope'
      MemorySize: 128
      Timeout: 90
      Role: !GetAtt nsLambdaRole.Arn

#Get Netskope Role Prep
  NetskopeRolePrep:
    Type: 'Custom::NetskopeRolePrep'
    Properties:
      ServiceToken: !GetAtt nsAwsRolePrepInfo.Arn
      nsDomain: !Ref NSDomain
      nsToken: !Ref NSApiToken

#Create AWS Role for CSA
  NetskopeIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt NetskopeRolePrep.nsAccountId
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals: 
                'sts:ExternalId': !GetAtt NetskopeRolePrep.nsExternalId
      Path: /
      Policies:
        - PolicyName: NetskopeInlinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudtrail:DescribeTrails'
                  - 'cloudtrail:LookupEvents'
                  - 's3:GetObject'
                  - 's3:GetObjectAcl'
                  - 's3:ListBucket'
                  - 's3:ListAllMyBuckets'
                  - 's3:GetBucketLocation'
                  - 'dynamodb:ListTagsOfResource'
                  - 'lambda:Get*'
                  - 'lambda:List'
                  - 'sns:ConfirmSubscription'
                  - 'sns:Subscribe'
                  - 'sns:Unsubscribe'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:GetQueueUrl'
                  - 'sqs:ListDeadLetterSourceQueues'
                  - 'sqs:ListQueues'
                Resource: '*'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/SecurityAudit"

#Create Netskope AWS Instance
  NetskopeAwsInstance:
    Type: 'Custom::NetskopeAwsInstance'
    Properties:
      ServiceToken: !GetAtt nsCreateAwsInstance.Arn
      nsDomain: !Ref NSDomain
      nsToken: !Ref NSApiToken
      instanceName: !Ref AWSAccount
      roleArn: !GetAtt NetskopeIAMRole.Arn
      interval: !Ref ScanInterval
      adminEmail: !Ref AdminEmail
      useFor:
        - securityscan

#Grant Netskope AWS Instance
  NetskopeAwsGrant:
    DependsOn:
    - NetskopeAwsInstance
    Type: 'Custom::NetskopeAwsGrantInstance'
    Properties:
      ServiceToken: !GetAtt nsGrantInstance.Arn
      nsDomain: !Ref NSDomain
      nsToken: !Ref NSApiToken
      instanceName: !Ref AWSAccount